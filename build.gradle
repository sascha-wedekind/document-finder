plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
}

ext {
    lombokVersion = '1.18.22'
    slf4jVersion = '1.7.36'
    logbackVersion = '1.2.10'
    luceneVersion = '9.0.0'
    junitVersion = '5.8.2'
    mockitoVersion = '4.3.1'
    assertjVersion = '3.22.0'
    reactorVersion = '3.4.14'
    guavaVersion = '31.0.1-jre'
    tikaVersion = '2.1.0'
    daggerVersion = '2.41'
    javaFxVersion = '17.0.1'
    fontAwesomeFxVersion = '2.2.0-9.1.2'
    testFxVersion = '4.0.16-alpha'
    gsonVersion = "2.9.0"
    jsonAssertVersion = '1.5.0'
    defaultMainClass = 'com.bytedompteur.documentfinder.ui.DocumentFinderMain'
}

group 'com.bytedompteur'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    //  ============================================
    //  Runtime
    //  ============================================
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "org.apache.lucene:lucene-core:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queryparser:${luceneVersion}"
    implementation "org.apache.lucene:lucene-analysis-common:${luceneVersion}"
    implementation "io.projectreactor:reactor-core:${reactorVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.tika:tika-core:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-pdf-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-miscoffice-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-microsoft-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-apple-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-text-module:${tikaVersion}"
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "de.jensd:fontawesomefx-materialicons:${fontAwesomeFxVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"



    //  ============================================
    //  Compile only
    //  ============================================
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"


    //  ============================================
    //  Test
    //  ============================================
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
    testImplementation "org.testfx:testfx-core:${testFxVersion}"
    testImplementation "org.testfx:testfx-junit5:${testFxVersion}"
    testImplementation "org.skyscreamer:jsonassert:${jsonAssertVersion}"

}

test {
    useJUnitPlatform()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        // Subdirectory in the project which acts as the application home dir while developing.
        excludeDirs += file("index-dev")
    }
}

//As documented here https://openjfx.io/openjfx-docs/#gradle
javafx {
    version = "${javaFxVersion}"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

application {
    mainClass = project.hasProperty('applicationMainClassOverwrite') ? project.getProperty('applicationMainClassOverwrite') : project.defaultMainClass
}
