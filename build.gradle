import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Paths
import java.util.regex.Pattern

//https://github.com/qoomon/gradle-git-versioning-plugin

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
    id 'me.qoomon.git-versioning' version '6.4.2'
}

ext {
    lombokVersion = '1.18.26'
    slf4jVersion = '2.0.7'
    jclOverSlf4jVersion = '2.0.7'
    logbackVersion = '1.4.7'
    janinoVersion = "3.1.9"
    luceneVersion = '9.5.0'
    mockitoVersion = '5.3.1'
    junitVersion = '5.9.3'
    assertjVersion = '3.24.2'
    reactorVersion = '3.5.5'
    guavaVersion = '31.1-jre'
    tikaVersion = '2.7.0'
    daggerVersion = '2.46.1'
    javaFxVersion = '20.0.1'
    fontAwesomeFxVersion = '2.2.0-9.1.2'
    testFxVersion = '4.0.16-alpha'
    gsonVersion = '2.10.1'
    jsonAssertVersion = '1.5.1'
    xercesImplVersion = '2.12.2'
    jSystemThemeDetectorVersion = '3.8'
    failsafeVersion = '3.3.1'
    defaultMainClass = 'com.bytedompteur.documentfinder.DocumentFinderMain'
}

group 'com.bytedompteur'
version '1.0-SNAPSHOT'
OperatingSystem operatingSystem = DefaultNativePlatform.currentOperatingSystem
gitVersioning.apply {
    refs {
        considerTagsOnBranches = true
        tag('v(?<version>.*)') {
            version = '${ref.version}'
        }
        branch('.+') {
            version = '1.0-${ref}-SNAPSHOT'
        }

    }

    // optional fallback configuration in case of no matching ref configuration
    rev {
        version = '${commit}'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

configurations {
    all*.exclude group: 'xml-apis'
    // Exclude cryptomator linux integration dependencies, which lead to duplicate module error while executing jpackage
    all*.exclude group: 'org.purejava' // org.purejava:kdewallet
    all*.exclude group: 'de.swiesend' // de.swiesend:secret-service
}

dependencies {
    //  ============================================
    //  Runtime
    //  ============================================
    implementation "xerces:xercesImpl:${xercesImplVersion}"
    implementation "dev.failsafe:failsafe:${failsafeVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "org.slf4j:jcl-over-slf4j:${jclOverSlf4jVersion}" // Route Apache Tika logs to Logback
    implementation "org.codehaus.janino:janino:${janinoVersion}"
    implementation "org.apache.lucene:lucene-core:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queryparser:${luceneVersion}"
    implementation "org.apache.lucene:lucene-analysis-common:${luceneVersion}"
    implementation "io.projectreactor:reactor-core:${reactorVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.tika:tika-core:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-pdf-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-miscoffice-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-microsoft-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-apple-module:${tikaVersion}"
    implementation "org.apache.tika:tika-parser-text-module:${tikaVersion}"
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "de.jensd:fontawesomefx-materialicons:${fontAwesomeFxVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.github.Dansoftowner:jSystemThemeDetector:${jSystemThemeDetectorVersion}"

    //  ===================================================================================
    //  Operating system dependent runtime
    //  Because the application release build must be done on the same OS as the target OS
    //  ===================================================================================
    if (operatingSystem.isMacOsX()) {
        implementation "org.cryptomator:integrations-mac:1.2.1"
    } else if (operatingSystem.isWindows()) {
        implementation "org.cryptomator:integrations-win:1.2.1"
    } else if (operatingSystem.isLinux()) {
        implementation "org.cryptomator:integrations-linux:1.2.1"
    }

    //  ============================================
    //  Compile only
    //  ============================================
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    //  ============================================
    //  Test
    //  ============================================
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "com.google.dagger:dagger:${daggerVersion}"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
    testImplementation "org.testfx:testfx-core:${testFxVersion}"
    testImplementation "org.testfx:testfx-junit5:${testFxVersion}"
    testImplementation "org.skyscreamer:jsonassert:${jsonAssertVersion}"
}

test {
    useJUnitPlatform()
    // Disable Java modules (Jigsaw) while running tests. See gradle-modules-plugin.
    moduleOptions {
        runOnClasspath = true
    }
}

compileTestJava {
    dependsOn('createVersionInfoPropertiesFile')
    // Disable Java modules (Jigsaw) while running tests. See gradle-modules-plugin.
    moduleOptions {
        compileOnClasspath = true
    }
}

jar {
    dependsOn('createVersionInfoPropertiesFile')
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        // Subdirectory in the project which acts as the application home dir while developing.
        excludeDirs += file("index-dev")
    }
}

//As documented here https://openjfx.io/openjfx-docs/#gradle
javafx {
    version = "${javaFxVersion}"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

application {
    mainClass = project.hasProperty('applicationMainClassOverwrite') ? project.getProperty('applicationMainClassOverwrite') : project.defaultMainClass
    mainModule = 'DocumentFinder.main'
}

jlink {
    def osSpecificCryptomatorIntegrationsPackageRequired = null
    def semverPattern = Pattern.compile("\\d.*\\.\\d.*\\.\\d.*")
    def isSnapshotBuild = !semverPattern.matcher("${version}").matches()
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--verbose']
    launcher {
        name = isSnapshotBuild ? "DocumentFinder-SNAPSHOT-${project.property("git.commit")}" : "DocumentFinder"
    }
    jpackage {
        if (isSnapshotBuild)
            appVersion = '1.0.0'
        else
            appVersion = "${version}".replaceAll('v', '')


        vendor = 'DocumentFinder'

        if (operatingSystem.isWindows()) {
            installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-menu-group', 'DocumentFinder', '--win-upgrade-uuid', '420e9eb8-5b23-4589-88bb-94c1b0b70b8b', '--win-shortcut', '--about-url', 'https://github.com/sascha-wedekind/document-finder']
            icon = 'src/main/resources/images/DocumentFinderIcon.ico'
            installerType = 'msi'
            osSpecificCryptomatorIntegrationsPackageRequired = 'org.cryptomator.integrations.win'
        } else if (operatingSystem.isLinux()) {
            icon = 'src/main/resources/images/DocumentFinderIcon_512.png'
            installerType = 'deb'
            installerOptions = ['--about-url', 'https://github.com/sascha-wedekind/document-finder']
        } else if (operatingSystem.isMacOsX()) {
            icon = 'src/main/resources/images/DocumentFinderIcon_512.icns'
            installerType = 'dmg'
            jvmArgs = ['-Dapple.awt.enableTemplateImages=true', '-Dapple.awt.UIElement=true', '-Dapple.laf.useScreenMenuBar=true', '-Dsun.java2d.metal=true']
            installerOptions = ['--about-url', 'https://github.com/sascha-wedekind/document-finder', '--mac-package-name', 'DocumentFinder', '--mac-package-identifier', 'com.bytedompteur.documentfinder.DocumentFinderMain', '--mac-app-category', 'public.app-category.productivity']
            osSpecificCryptomatorIntegrationsPackageRequired = 'org.cryptomator.integrations.mac'
        }
    }
    /*
     * All setting are found out in trial and error process. See also 'create-image-with-jlink.md' in the documentation
     * directory.
     */
    mergedModule {
        excludeProvides servicePattern: 'org.w3c.dom.DOMImplementationSourceList'
        excludeProvides servicePattern: 'org.xml.sax.driver'
        excludeProvides servicePattern: 'io.micrometer.context.ContextAccessor'
        excludeProvides servicePattern: 'reactor.blockhound.integration.BlockHoundIntegration'
        requires 'org.slf4j' // apache.tika.core requires org.slf4j
//        requires 'jdk.jdwp.agent' // Required for remote debugging
        if (!operatingSystem.isLinux()) {
            requires osSpecificCryptomatorIntegrationsPackageRequired // OS specific tray and dock integration
        }
    }
    addExtraDependencies('javafx')
    addExtraDependencies('integrations')
}


tasks.register('createVersionInfoPropertiesFile', WriteProperties) {
    description "Creates a version properties file in the build resources directory"
    dependsOn 'processResources'
    outputFile Paths.get(sourceSets.main.output.resourcesDir.getPath(), 'version-info.properties').toFile()
    property 'version', version
    property 'commit', project.property("git.commit")
    property 'commit-date', project.property("git.commit.timestamp.datetime")
}
processResources.configure {finalizedBy('createVersionInfoPropertiesFile')} // enforce property file creation after processing resources

tasks.register('printVersionSW', Task) {
    description "Print version info to console"
    dependsOn 'processResources'
    // log version info to console
    doLast {
        println "Version: ${project.version}"
        println "Version: ${getProject().getVersion()}"
        println "Commit: ${project.property("git.commit")}"
        println "Commit date: ${project.property("git.commit.timestamp.datetime")}"
    }
}